.home {
  height: calc(100vh - 80px);
  background: rgb(253, 253, 253);
  //padding-top:66px;
  /*background-image: url("../../assets/home.jpg");
  background-size: cover;*/
  position:relative;
  z-index: 10000;
  top:80px;
  background: transparent;
  .header{
    font-size:40px;
    color:white;
    text-align: center;
  }
}

.category img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  background: linear-gradient(
    to right,
    rgb(8, 181, 187),
    rgba(146, 34, 156, 0.986)
  );
}
.category:hover {
  animation: bounce 0.5s infinite; //other browsers
  -webkit-animation: bounce 0.5s infinite; //webkit browsers
  -moz-animation: bounce 0.5s infinite; //firefox
  -o-animation: bounce 0.5s infinite; //opera
}
.anime {
}
.category {
  width: 80px;
  height: 80px;
  border: 1px solid black;
  border-radius: 50px;
}

/// Mixin to put items on a circle
/// [1] - Allows children to be absolutely positioned
/// [2] - Allows the mixin to be used on a list
/// [3] - In case box-sizing: border-box has been enabled
/// [4] - Allows any type of direct children to be targeted
///
/// @param {Integer} $nb-items - Number or items
/// @param {Length} $circle-size - Container size
/// @param {Length} $item-size - Item size
/// @param {String | false} $class-for-IE - Base class name for old IE
@mixin distribute-on-circle(
  $nb-items,
  $circle-size,
  $item-size,
  $class-for-IE: false
) {
  $half-item: ($item-size / 2);
  $half-parent: ($circle-size / 2);

  position: relative; /* 1 */
  width: $circle-size;
  height: $circle-size;
  padding: 0;
  border-radius: 50%;
  list-style: none; /* 2 */
  box-sizing: content-box; /* 3 */

  > * {
    /* 4 */
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: $item-size;
    height: $item-size;
    margin: -$half-item;
  }

  $angle: (360 / $nb-items);
  $rot: 0;

  @for $i from 1 through $nb-items {
    @if not $class-for-IE {
      > :nth-of-type(#{$i}) {
        transform: rotate($rot * 1deg)
          translate($half-parent)
          rotate($rot * -1deg);
      }
    } @else {
      > .#{$class-for-IE}#{$i} {
        // If CSS transforms are not supported
        $mt: sin($rot * pi() / 180) * $half-parent - $half-item;
        $ml: cos($rot * pi() / 180) * $half-parent - $half-item;
        margin: $mt 0 0 $ml;
      }
    }

    $rot: ($rot + $angle);
  }
}

.circle-container {
  @include distribute-on-circle(5, 15em, 6em, false);
  margin: 5em auto 0;
  border: solid 5px rgba(137, 43, 226, 0);
}

.circle-container img {
  display: block;
  width: 100%;
  border-radius: 50%;
  filter: grayscale(100%);

  &:hover {
    filter: grayscale(0);
  }
}


//bounce

@-webkit-keyframes bounce {
  0%,  
  100% {
     -webkit-transform: translateY(0);
  } 
  50% {
      -webkit-transform: translateY(-10px);
  }
}
@-moz-keyframes bounce {
  0%, 
  100% {
     -moz-transform: translateY(0);
  }
  50% {
     -moz-transform: translateY(-10px);
  }
}
@-o-keyframes bounce {
  0%,
  100% {
     -o-transform: translateY(0);
  }
  50% {
     -o-transform: translateY(-10px);
  }
}
@keyframes bounce {
  0%,  
  100% {
      transform: translateY(0);
  }
  50% {
      transform: translateY(-10px);
  }
}
